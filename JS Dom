### DOM的概念

概念：文档对象模型。
- 文档：html文件
- 对象：属性和方法
- 模型：（树）

获取元素=======>
根据id值获取单个元素 语法：document.getElementById('id值'); 

  <button id="btn">按钮1</button>
  <button id="btn">按钮2</button>
  <script>
    // 根据id获取单个元素，返回一个元素
    var btn = document.getElementById('btn');
    // dir可以打印出对象中的属性和方法
    console.dir(btn);
    console.log(btn);
    // 细节：若页面上有相同的id值的标签时，在获取时，获取的是id值第一次出现的标签。
  </script>

根据标签名获取一组元素 语法：document.getElementsByTagName('标签名'); 
  <button>按钮1</button>
  <button>按钮2</button>
  <button>按钮3</button>
  <button>按钮4</button>
  <script>
    // 需求：获取所有按钮
    // 根据标签名获取一组元素，返回的是一个伪数组
    var btns = document.getElementsByTagName('button');
    console.log(btns);

    // 数组和伪数组的区别？
    // 相同：都有索引和长度（length）
    // 不同点：伪数组不能够调用真正数组中内置的方法（push、pop、sort...）
  </script>

根据选择器获取单个元素 语法：document.querySelector('选择器');
根据选择器获取一组元素 语法：document.querySelectorAll('选择器');

  <button class="btn">按钮1</button>
  <button class="btn">按钮2</button>
  <button class="btn">按钮3</button>
  <script>
    // 根据选择器获取当个元素，若有多个同样选择器的标签，获取的将会是第一次出现的标签
    var btn = document.querySelector('.btn');
    console.log(btn);

    // 根据选择器获取一组元素
    var btns = document.querySelectorAll('.btn');
    console.log(btns);
  </script>
Tips：根据选择器获取元素在IE8以下有兼容性问题。

=====================================================================================
事件三要素

- 事件源：被触发的元素，比如点击的按钮
- 事件类型：如何触发的事件，比如点击按钮 onclick
- 事件处理程序：事件发生后的结果。
例如：
 // 获取按钮元素
 var btn = document.getElementById('btn');
 btn.onclick = function(){
   // 函数体中的代码，就是事件发生后要执行的程序
   alert('燃烧我的卡路里');
 };
 // 事件处理程序的本质是什么？
 // ① onclick本质上就是事件源这个对象中的某一个键值对而已。默认值是null，表示没有注册事件
 // ② 给事件源注册onclick事件，其实本质上就是给onclick赋值函数，所以onclick是事件源的一个方法而已
 // ③ 点击按钮时，浏览器自动调用了btn.onclick();
 
 
 事件处理程序中的this=======>事件处理程序中的this指向事件源
 // 获取按钮元素
 var btn3 = document.getElementById('btn');
 btn3.onclick = function(){
   // 函数体中的代码，就是事件发生后要执行的程序
   // 关键字：this，代表事件源
   console.log(this);
 }
 
 
 取消a标签默认行为
 方式1：事件处理程序中最后设置return false; 
  <a id="link" href="https://www.baidu.com">点击</a>
  <script>
    var link = document.getElementById('link');
    link.onclick = function(){
      
      	alert('你好');
      	// 方式1：取消a点击后的默认跳转行为 return false;
      	return false;
    };
  </script>
  
  方式2：设置a标签的href属性值为：javascript:
  <!-- 方式二：给a标签的href值设置javascript: ,表示将来点击a时，会阻止默认跳转行为，并且仅仅会执行js代码-->
  <a href="javascript:">点击2</a>
  <!-- 扩展：通过a可以打开打电话应用 -->
  <a href="tel:">打电话</a>
  <!-- 扩展：通过a可以打开电子邮件应用 -->
  <a href="mailto:">打开邮件</a>
  
  ===================================================================================
  常见的属性
  id、title、href、src、className、innerText / textContent、innerHTML
  
  1.className操作类名
    <div id="box" class="a"></div>
    <script>
      var div = document.getElementById('box');
      // 获取类名
      console.log(div.class); // undefined
      console.log(div.className);  // a
      // 设置类名
      div.className = 'b';
    </script>
    
   2.innerText和innerHTML的区别
    <div id="box"><h2>我是div中的标题</h2></div>
    <script>
      // 1. 获取div元素
      var div = document.getElementById('box');
      console.dir(div);
      // 【获取】
      // ① 通过innerText获取,仅仅包含文本
      console.log(div.innerText);
      // ② 通过innerHTML获取，若有子标签时，会包含文本和子标签
      console.log(div.innerHTML);

      // 【设置】
      // ① 通过innerText设置,若设置中包含了子标签，该标签不会被渲染而是当做普通文本显示
      // div.innerText = '<a href="#">我是div中的超链接</a>';
      // ② 通过innerHTML设置,若设置中包含了子标签，该标签会被渲染显示
      div.innerHTML= '<a href="#">我是div中的超链接</a>';
    </script>
    
    3.innerText和textContent的兼容性问题
    <div id="box"><h2>我是div中的标题</h2></div>
    <script>
      // 1. 获取div元素
      var div = document.getElementById('box');
      console.log('innerText:' + div.innerText);
      console.log('textContent:' + div.textContent);
      // 相同点：获取的都是文本
      // 不同点：
      // ① textContent属性在ie低版本中不支持，innerText基本没有兼容问题
      // ② textContent标准属性（官宣），innerText（野路子，但是兼容性好,推荐使用）
   </script>

===================================================================================================
节点的层级

根据节点的关系来获取元素

节点的关系
- 父子关系
- 兄弟关系

根据子节点获取父节点

 - 语法：子节点.parentNode

根据父节点获取子节点

- 语法：父节点.childNodes; 获取的子节点包含【文本】和【元素】
- 语法：父元素.children;  获取的子节点仅仅包含【元素】
- 语法：父节点.firstElementChild; 获取【第一个】子元素节点
- 语法：父节点.lastElementChild; 获取【最后一个】元素节点

节点的nodeType、nodeName、nodeValue的属性

- 节点的nodeType（节点类型）属性的作用：元素→ 1；  文本→3
- 节点的nodeName（节点名称）属性的作用：元素→ 大写的标签名  文本→ `#text` 
- 节点的nodeValue（节点值）属性的作用：元素→ null       文本→ 文本的内容

获取兄弟节点

- 获取下一个兄弟
  - 语法：**节点.nextElementSibling 
- 获取上一个兄弟
  - 语法：**节点.previousElementSibling
  
  
 动态创建元素
 
- 通过innerHTML创建元素
- 语法：元素.innerHTML = '内容';
- 代码
<button>创建li</button>
  <ul>
    <li>我是li</li>
  </ul>
  <script>
    var btn = document.querySelector('button');
    var ul = document.querySelector('ul');
    btn.onclick = function() {
      // 获取ul中原有的内容
      var str = ul.innerHTML;
      // 设置ul的内容
      ul.innerHTML =str + '<li>我是新来的</li>';
    };
  </script>
  
  通过document.createElement创建元素

- 语法：document.createElement(‘标签名’);   返回一个新的元素对象

- 代码：
<button>创建li</button>
  <ul>
    <li>我是li</li>
  </ul>
  <script>
    var btn = document.querySelector('button');
    var ul = document.querySelector('ul');
    btn.onclick = function() {
      // 创建一个新的li元素
      var newLi = document.createElement('li');
      // 追加到ul中
      ul.appendChild(newLi);
      // 设置元素的内容
      newLi.innerText = '我是新来的';
    };
  </script>
  
  提示： - innerHTML在追加多个元素时执行速度慢，性能差。
        - createElement方法执行速度快*性能高。
        
 动态追加元素

- 语法：父元素.appendChild(子元素);

- 代码：
<button>创建li</button>
<ul>
 <li>我是li</li>
</ul>
<script>
 var btn = document.querySelector('button');
 var ul = document.querySelector('ul');
 btn.onclick = function() {
   // 创建一个新的li元素
   var newLi = document.createElement('li');
   // 追加到ul中
   ul.appendChild(newLi);
   // 设置元素的内容
   newLi.innerText = '我是新来的';
 };
</script>

动态删除元素

- 语法：父元素.removeChild(子元素);

1、创建元素：var n = document.createElement('标签名');

2、追加元素：父元素.appendChild(子元素)

3、删除元素：父元素.removeChild(子元素)

插入元素

- 语法：父节点.insertBefore(新的节点,旧的子节点)

替换元素

- 语法：父节点.replaceChild(新的节点,旧的子节点)
- 代码：

克隆元素

- 语法：元素.cloneNode(true或false);  返回一份新的克隆后的元素

=============================================================================

## 1. 事件监听

### 1.1 为什么要学事件监听

需求：给一个元素连续绑定两次点击事件，并且事件处理程序都有效。

### 1.2 事件监听注册事件

- 语法：**事件源.addEventListener('事件类型',事件处理程序,是否捕获);** 

  事件源 → 操作的元素

  事件类型→ 在此不加on,  onclick→click

  事件处理程序→ 函数

  是否捕获，可选参数，默认为false。 true→ 捕获，false→冒泡

- 代码：

  ```javascript
    var btn = document.querySelector('button');
    // 事件监听注册事件
    btn.addEventListener('click',function(){
      console.log(1);
    });
  ```

### 1.3 事件监听移除事件

- 语法：**事件源.removeEventListener('事件类型',事件处理程序的名称)**

  - 事件源，操作的元素
  - 事件类型，不加on
  - 事件处理程序的名字：函数名
    - 注意：若将来要通过事件监听的方式移除事件时，之前注册事件**要把事件处理程序单独抽取出来命名** 。

- 代码：

  ```javascript
    var btn = document.querySelector('button');
    // 事件监听注册事件
    var fn1 = function() {
      console.log(1);
    };
    var fn2 = function() {
      console.log(2);
    };
    btn.addEventListener('click',fn1);
    btn.addEventListener('click',fn2);
   
    // 事件移除事件
    btn.removeEventListener('click',fn2)
    btn.removeEventListener('click',fn1)
  ```

注册事件：

​	事件源.onclick = function () {}

​	事件源.addEventListener('事件类型不加on的',function () {});

移除事件：

​	事件源.onclick = null;

​	事件源.removeEventListener('事件类型不加on的',事件处理名称);

## 2. 事件流

### 2.1 什么是事件流

**事件流** ：事件触发后的三个阶段（捕获阶段、目标阶段、冒泡阶段）。

**注意：** 在事件触发后，这三个阶段始终是存在的，**顺序① 先捕获，② 到达目标，③ 再冒泡。**  但是在触发后，针对捕获和冒泡，仅仅启用一个。



### 2.4 DOM事件处理

DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而**DOM事件分为3个级别：DOM 0级事件处理，DOM 2级事件处理和DOM 3级事件处理**。由于DOM 1级中没有事件的相关内容，所以没有DOM 1级事件。DOM3级事件在DOM2级事件的基础上添加了更多的事件类型。

#### DOM0

DOM0级事件具有极好的跨浏览器优势，会以最快的速度绑定。第一种方式是内联模型（行内绑定），将函数名直接作为html标签中属性的属性值。

```js
<div onclick="btnClick()">click</div>
<script>
function btnClick(){
    console.log("hello");
}
</script>
```

内联模型的缺点是不符合w3c中关于内容与行为分离的基本规范。第二种方式是脚本模型（动态绑定），通过在JS中选中某个节点，然后给节点添加onclick属性。

```js
<div id="btn">点击</div>
<script>
var btn=document.getElementById("btn");
btn.onclick=function(){
    console.log("hello");
}
</script>
```

点击输出`hello`，没有问题；如果我们给元素添加两个事件

```js
<div id="btn">点击</div>
<script>
var btn=document.getElementById("btn");
btn.onclick=function(){
    console.log("hello");
}
btn.onclick=function(){
    console.log("hello again");
}
</script>
```

这时候只有输出`hello again`，很明显，第一个事件函数被第二个事件函数给覆盖掉，所以脚本模型的缺点是同一个节点只能添加一次同类型事件。让我们把div扩展到3个。

```javascript
<div id="btn3">
    btn3
    <div id="btn2">
        btn2
        <div id="btn1">
            btn1
        </div>
    </div>
</div>
<script>
    let btn1 = document.getElementById("btn1");
    let btn2 = document.getElementById("btn2");
    let btn3 = document.getElementById("btn3");
    btn1.onclick=function(){
        console.log(1)
    }
    btn2.onclick=function(){
        console.log(2)
    }
    btn3.onclick=function(){
        console.log(3)
    }
</script>
```

#### DOM2

进一步规范之后，有了DOM2级事件处理程序，其中定义了两个方法：

1. addEventListener() ---添加事件侦听器
2. removeEventListener() ---删除事件侦听器

函数均有3个参数， 第一个参数是要处理的事件名 第二个参数是作为事件处理程序的函数 第三个参数是一个boolean值，默认false表示使用冒泡机制，true表示捕获机制。

```js
<div id="btn">点击</div>

<script>
var btn=document.getElementById("btn");
btn.addEventListener("click",hello,false);
btn.addEventListener("click",helloagain,false);
function hello(){
    console.log("hello");
}
function helloagain(){
    console.log("hello again");
}
</script>
```

这时候两个事件处理程序都能够成功触发，说明可以绑定多个事件处理程序，但是注意，如果定义了一摸一样时监听方法，是会发生覆盖的，即同样的事件和事件流机制下相同方法只会触发一次，

```js
<div id="btn">点击</div>

<script>
var btn=document.getElementById("btn");
btn.addEventListener("click",hello,false);
btn.addEventListener("click",hello,false);
function hello(){
    console.log("hello");
}
</script>
```

这时候hello只会执行一次；让我们把div扩展到3个。

```js
<div id="btn3">
    btn3
    <div id="btn2">
        btn2
        <div id="btn1">
            btn1
        </div>
    </div>
</div>
<script>
    let btn1 = document.getElementById('btn1');
    let btn2 = document.getElementById('btn2');
    let btn3 = document.getElementById('btn3');
    btn1.addEventListener('click',function(){
        console.log(1)
    }, true)
    btn2.addEventListener('click',function(){
        console.log(2)
    }, true)
    btn3.addEventListener('click',function(){
        console.log(3)
    }, true)
</script>
```

这时候看到顺序和DOM0中的顺序反过来了，最外层的btn最先触发，因为addEventListener最后一个参数是true，捕获阶段进行处理。


那么冒泡和捕获阶段谁先执行呢？我们给每个元素分别绑定了冒泡和捕获两个事件。

```js
btn1.addEventListener('click',function(){
    console.log('btn1捕获')
}, true)
btn1.addEventListener('click',function(){
    console.log('btn1冒泡')
}, false)

btn2.addEventListener('click',function(){
    console.log('btn2捕获')
}, true)
btn2.addEventListener('click',function(){
    console.log('btn2冒泡')
}, false)

btn3.addEventListener('click',function(){
    console.log('btn3捕获')
}, true)
btn3.addEventListener('click',function(){
    console.log('btn2冒泡')
}, false)
```

我们看到先执行捕获阶段的处理程序，后执行冒泡阶段的处理程序，我们把顺序换一下再看运行结果：

```js
btn1.addEventListener('click',function(){
    console.log('btn1冒泡')
}, false)
btn1.addEventListener('click',function(){
    console.log('btn1捕获')
}, true)

btn2.addEventListener('click',function(){
    console.log('btn2冒泡')
}, false)
btn2.addEventListener('click',function(){
    console.log('btn2捕获')
}, true)

btn3.addEventListener('click',function(){
    console.log('btn3冒泡')
}, false)
btn3.addEventListener('click',function(){
    console.log('btn3捕获')
}, true)
```

#### DOM 3级事件

在DOM 2级事件的基础上添加了更多的事件类型。

- UI事件，当用户与页面上的元素交互时触发，如：load、scroll
- 焦点事件，当元素获得或失去焦点时触发，如：blur、focus
- 鼠标事件，当用户通过鼠标在页面执行操作时触发如：dblclick、mouseup
- 滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel
- 文本事件，当在文档中输入文本时触发，如：textInput
- 键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress
- 合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart
- 变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified
- 同时DOM3级事件也允许使用者自定义一些事件。

============================================================================

## 事件对象

### 什么是事件对象

> 事件对象，在事件触发后 ，在事件处理程序中 （函数体），所获取并操作的对象。
>
> 事件对象：事件发生时的相关信息对象【event】

### 获取事件对象

> - 语法：**`事件源.事件类型 = function(e){  // 第一个形参e就是事件对象    }`** 

### 鼠标事件对象相关属性

- 鼠标事件类型

  - onclick
  - onmouseenter
  - onmouseleave
  - onmousemove,鼠标移动事件
  - onmousedown 鼠标按键按下事件
  - onmouseup   鼠标按钮弹起事件
  - onmouseenter：不支持事件冒泡，onmouseover：支持事件冒泡【可以通过target观察】
  - onmouseenter，onmouseover
  - onmouseleave，onmouseout

- 鼠标事件对象相关属性-获取鼠标的位置

  - 事件对象.clientX   /    事件对象.clientY    参照是==浏览器== 
  - 事件对象.pageX   /    事件对象.pageY    参照是==文档== 
  - 事件对象.offsetX   /    事件对象.offsetY    参照是==当前的元素== 

事件监听注册事件：事件源.addEventListener('事件类型'，事件处理程序，是否捕获);

​				  移除事件：事件源.onclick = null;

​				 事件监听移除事件；事件源.removeEventListener('事件类型'，事件程序名称);

事件流：事件触发后的三个阶段：捕获，目标，冒泡

事件对象：事件发生后的相关信息对象


### 键盘事件对象相关属性

- 键盘事件

  - 事件类型
    - onkeydown    键盘按下事件
    - onkeyup         键盘弹起事件
  - 注意：
    - 一般情况给document绑定键盘事件。


- 键盘事件对象相关属性-键盘按下哪个键

  - 事件对象.keyCode     获取键盘按键对应的键码值
  - 事件对象.altKey        表示alt键是否按下，返回布尔值。
  - 事件对象.shiftKey        表示shift键是否按下，返回布尔值。
  - 事件对象.ctrlKey        表示ctrl键是否按下，返回布尔值。（true按下，false没有按下）

### 事件对象的公共属性和方法

- 属性：

  - 事件对象.target     获取最先触发的元素
  - 和this的区别
    - this在事件处理程序中始终代表的是事件源
    - e.target 代表不一定是事件源，代表的是最先触发的元素【目标阶段→ document】

- 方法：

  - 事件对象.preventDefault();   阻止默认行为
  - 事件对象.stopPropagation();   停止冒泡传播
  - 【onmouseover支持冒泡，onmouseenter不支持冒泡】
  
  
  ## 兼容问题

- 获取事件对象的兼容问题

  - 标准：事件处理程序中的第一个形参

  - IE低版本：window.event

  - 兼容处理：
  
  document.onclick = function (e) {

     var _e = e || window.event;

     // 在js中，任何数据可以参与任何运算

     // 或运算格式：  左侧数据 || 右侧数据

     // 或运算结果是：左右其中一个数据

     // 运算规则：或运算运算的顺序是自左向右，若左侧是false或者将来能变成false,则输出右侧数据。否则输出左侧数据。

     console.log(_e);

   };  

====================================================================================================================

事件委托

### 事件委托介绍

**事件委托** （事件代理）：把子孙元素的事件注册，完全交给子孙元素的上级元素代理。
注意：委托是下级元素委托上级元素。    没有上级委托下级

### 如何实现事件委托

- 实现步骤

  ① 给子孙元素的上级注册事件

  ② 在事件处理程序中，通过==事件对象.target== 获取最先触发的元素

  ③ 可以通过==事件对象.target的nodeName== 属性检测最先触发的是否是指定元素

-代码
<script>
// ① 给子孙元素的上级注册事件
var ul = document.querySelector('ul');
ul.onclick = function(e) {
 // ② 在事件处理程序中，通过事件对象.target 获取最先触发的元素
 var t = e.target;
 // console.dir(t);
 // ③ 可以通过事件对象.target的nodeName 属性检测最先触发的是否是指定元素
 if(t.nodeName=='LI') {
   console.log(t.innerText);
 }
};
</script>

### 事件委托的作用

事件委托的优点:

1. 提高性能:每一个函数都会占用内存空间，只需添加一个事件处理程序代理所有事件，所占用的内存空间更少。
2. 动态监听:使用事件委托可以自动绑定动态添加的元素，即新增的节点不需要主动添加也可以一样具有和其他元素一样的事件。

### 事件委托的原理

- 关键：事件对象.target； 可以获取最先触发的元素
- 原理：因为**事件冒泡**的存在,我们才可以获取到最先触发的元素。【目标→ document】

